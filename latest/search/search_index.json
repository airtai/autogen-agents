{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Autogen Agents</li> <li>Reference - Code API<ul> <li>autogen_agents<ul> <li>agents<ul> <li>GoogleSearchAgent</li> <li>google_search_agent<ul> <li>GoogleSearchAgent</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li>Release Notes</li> </ul>"},{"location":"","title":"Autogen Agents","text":"<p>Unofficial agents for the Autogen framework</p> <p> </p>"},{"location":"#stay-in-touch","title":"Stay in touch","text":"<p>Please show your support and stay in touch by:</p> <ul> <li> <p>giving our GitHub repository a star, and</p> </li> <li> <p>joining our Discord server</p> </li> </ul> <p>Your support helps us to stay in touch with you and encourages us to continue developing and improving the framework. Thank you for your support!</p>"},{"location":"#contributors","title":"Contributors","text":"<p>Thanks to all of these amazing people who made the project better!</p> <p> </p>"},{"location":"release/","title":"Release Notes","text":""},{"location":"release/#000","title":"0.0.0","text":"<p>Initial empty release.</p>"},{"location":"release/#whats-changed","title":"What's Changed","text":"<ul> <li>fix: deploy docs by @davorrunje in https://github.com/airtai/autogen-agents/pull/1</li> </ul>"},{"location":"release/#new-contributors","title":"New Contributors","text":"<ul> <li>@davorrunje made their first contribution in https://github.com/airtai/autogen-agents/pull/1</li> </ul> <p>Full Changelog: https://github.com/airtai/autogen-agents/commits/0.0.0</p>"},{"location":"api/autogen_agents/","title":"Reference - Code API","text":"<p>Here's the reference or code API, the classes, functions, parameters, attributes, and all the Autogen Agents parts you can use in your applications.</p>"},{"location":"api/autogen_agents/agents/GoogleSearchAgent/","title":"GoogleSearchAgent","text":""},{"location":"api/autogen_agents/agents/GoogleSearchAgent/#autogen_agents.agents.GoogleSearchAgent","title":"autogen_agents.agents.GoogleSearchAgent","text":"<pre><code>GoogleSearchAgent(\n    name: str,\n    *,\n    api_key: str,\n    cse_id: str,\n    system_message: Optional[str] = DEFAULT_SYSTEM_MESSAGE,\n    is_termination_msg: Optional[\n        Callable[[Dict[str, Any]], bool]\n    ] = None,\n    max_consecutive_auto_reply: Optional[int] = None,\n    human_input_mode: Optional[str] = \"NEVER\",\n    code_execution_config: Optional[\n        Union[Dict[str, Any], bool]\n    ] = False,\n    config_list: List[Dict[str, Any]],\n    timeout: Optional[int] = None,\n    default_auto_reply: Optional[\n        Union[str, Dict[str, Any], None]\n    ] = \"\"\n)\n</code></pre> <p>             Bases: <code>ConversableAgent</code></p> <p>GoogleSearchAgent agent. Search the web for the user and provide the search report.</p> <p><code>human_input_mode</code> is default to \"NEVER\" and <code>code_execution_config</code> is default to False.</p> <p>This agent executes function calls.</p> Source code in <code>autogen_agents/agents/google_search_agent.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    *,\n    api_key: str,\n    cse_id: str,\n    system_message: Optional[str] = DEFAULT_SYSTEM_MESSAGE,\n    is_termination_msg: Optional[Callable[[Dict[str, Any]], bool]] = None,\n    max_consecutive_auto_reply: Optional[int] = None,\n    human_input_mode: Optional[str] = \"NEVER\",\n    code_execution_config: Optional[Union[Dict[str, Any], bool]] = False,\n    # llm_config: Optional[Union[Dict, bool]] = None,\n    config_list: List[Dict[str, Any]],\n    timeout: Optional[int] = None,\n    default_auto_reply: Optional[Union[str, Dict[str, Any], None]] = \"\",\n) -&gt; None:\n    llm_config = GoogleSearchAgent.get_llm_config(config_list, timeout)\n    function_map = GoogleSearchAgent.get_function_map(api_key, cse_id)\n    self.api_key = api_key\n\n    super().__init__(\n        name=name,\n        system_message=system_message,\n        is_termination_msg=is_termination_msg,\n        max_consecutive_auto_reply=max_consecutive_auto_reply,\n        human_input_mode=human_input_mode,\n        function_map=function_map,\n        code_execution_config=code_execution_config,\n        llm_config=llm_config,\n        default_auto_reply=default_auto_reply,\n    )\n</code></pre>"},{"location":"api/autogen_agents/agents/GoogleSearchAgent/#autogen_agents.agents.GoogleSearchAgent.DEFAULT_SYSTEM_MESSAGE","title":"DEFAULT_SYSTEM_MESSAGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEFAULT_SYSTEM_MESSAGE = \"You are a helpful AI assistant that searches web and generates report.\\n\"\n</code></pre>"},{"location":"api/autogen_agents/agents/GoogleSearchAgent/#autogen_agents.agents.GoogleSearchAgent.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"api/autogen_agents/agents/GoogleSearchAgent/#autogen_agents.agents.GoogleSearchAgent.get_function_map","title":"get_function_map  <code>staticmethod</code>","text":"<pre><code>get_function_map(\n    api_key: str, cse_id: str\n) -&gt; Dict[str, Any]\n</code></pre> <p>Get the function_map for the agent.</p> PARAMETER  DESCRIPTION <code>api_key</code> <p>The api_key for the agent.</p> <p> TYPE: <code>str</code> </p> <code>cse_id</code> <p>Google Custom Search Engine ID</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>The function_map for the agent.</p> Source code in <code>autogen_agents/agents/google_search_agent.py</code> <pre><code>@staticmethod\ndef get_function_map(api_key: str, cse_id: str) -&gt; Dict[str, Any]:\n    \"\"\"Get the function_map for the agent.\n\n    Args:\n        api_key: The api_key for the agent.\n        cse_id: Google Custom Search Engine ID\n\n    Returns:\n        The function_map for the agent.\n    \"\"\"\n\n    def search_web(\n        query: str, *, api_key: str = api_key, cse_id: str = cse_id\n    ) -&gt; List[Dict[str, Any]]:\n        \"\"\"Search the web for the user and provide the search report.\n\n        Args:\n            query: The query to search.\n\n        Returns:\n            The search report.\n        \"\"\"\n\n        # Build a service object for the API\n        service = build(\"customsearch\", \"v1\", developerKey=api_key)\n\n        # Perform the search\n        res = service.cse().list(q=query, cx=cse_id).execute()\n\n        # Return the results\n        items: List[Dict[str, Any]] = res.get(\"items\", [])\n        return items\n\n    function_map = {\"search_web\": search_web}\n    return function_map\n</code></pre>"},{"location":"api/autogen_agents/agents/GoogleSearchAgent/#autogen_agents.agents.GoogleSearchAgent.get_functions_config","title":"get_functions_config  <code>staticmethod</code>","text":"<pre><code>get_functions_config() -&gt; Dict[str, Any]\n</code></pre> <p>Get the functions part of the llm_config for the agent.</p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>The functions part of the llm_config for the agent.</p> Source code in <code>autogen_agents/agents/google_search_agent.py</code> <pre><code>@staticmethod\ndef get_functions_config() -&gt; Dict[str, Any]:\n    \"\"\"Get the functions part of the llm_config for the agent.\n\n    Returns:\n        The functions part of the llm_config for the agent.\n    \"\"\"\n\n    functions = {\n        \"search_web\": {\n            \"name\": \"search_web\",\n            \"description\": \"search the web for the user and provide the search report.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"query\": {\n                        \"type\": \"string\",\n                        \"description\": \"query to search\",\n                    }\n                },\n                \"required\": [\"query\"],\n            },\n        }\n    }\n\n    return functions\n</code></pre>"},{"location":"api/autogen_agents/agents/GoogleSearchAgent/#autogen_agents.agents.GoogleSearchAgent.get_llm_config","title":"get_llm_config  <code>staticmethod</code>","text":"<pre><code>get_llm_config(\n    config_list: List[Dict[str, Any]],\n    timeout: Optional[int] = None,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Get the llm_config for the agent.</p> PARAMETER  DESCRIPTION <code>config_list</code> <p>The config_list for the agent.</p> <p> TYPE: <code>List[Dict[str, Any]]</code> </p> <code>timeout</code> <p>The timeout for the agent.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>The llm_config for the agent.</p> Source code in <code>autogen_agents/agents/google_search_agent.py</code> <pre><code>@staticmethod\ndef get_llm_config(\n    config_list: List[Dict[str, Any]], timeout: Optional[int] = None\n) -&gt; Dict[str, Any]:\n    \"\"\"Get the llm_config for the agent.\n\n    Args:\n        config_list: The config_list for the agent.\n        timeout: The timeout for the agent.\n\n    Returns:\n        The llm_config for the agent.\n    \"\"\"\n\n    llm_config = {\n        \"functions\": GoogleSearchAgent.get_functions_config(),\n        \"config_list\": config_list,\n        \"timeout\": timeout,\n    }\n\n    return llm_config\n</code></pre>"},{"location":"api/autogen_agents/agents/google_search_agent/GoogleSearchAgent/","title":"GoogleSearchAgent","text":""},{"location":"api/autogen_agents/agents/google_search_agent/GoogleSearchAgent/#autogen_agents.agents.google_search_agent.GoogleSearchAgent","title":"autogen_agents.agents.google_search_agent.GoogleSearchAgent","text":"<pre><code>GoogleSearchAgent(\n    name: str,\n    *,\n    api_key: str,\n    cse_id: str,\n    system_message: Optional[str] = DEFAULT_SYSTEM_MESSAGE,\n    is_termination_msg: Optional[\n        Callable[[Dict[str, Any]], bool]\n    ] = None,\n    max_consecutive_auto_reply: Optional[int] = None,\n    human_input_mode: Optional[str] = \"NEVER\",\n    code_execution_config: Optional[\n        Union[Dict[str, Any], bool]\n    ] = False,\n    config_list: List[Dict[str, Any]],\n    timeout: Optional[int] = None,\n    default_auto_reply: Optional[\n        Union[str, Dict[str, Any], None]\n    ] = \"\"\n)\n</code></pre> <p>             Bases: <code>ConversableAgent</code></p> <p>GoogleSearchAgent agent. Search the web for the user and provide the search report.</p> <p><code>human_input_mode</code> is default to \"NEVER\" and <code>code_execution_config</code> is default to False.</p> <p>This agent executes function calls.</p> Source code in <code>autogen_agents/agents/google_search_agent.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    *,\n    api_key: str,\n    cse_id: str,\n    system_message: Optional[str] = DEFAULT_SYSTEM_MESSAGE,\n    is_termination_msg: Optional[Callable[[Dict[str, Any]], bool]] = None,\n    max_consecutive_auto_reply: Optional[int] = None,\n    human_input_mode: Optional[str] = \"NEVER\",\n    code_execution_config: Optional[Union[Dict[str, Any], bool]] = False,\n    # llm_config: Optional[Union[Dict, bool]] = None,\n    config_list: List[Dict[str, Any]],\n    timeout: Optional[int] = None,\n    default_auto_reply: Optional[Union[str, Dict[str, Any], None]] = \"\",\n) -&gt; None:\n    llm_config = GoogleSearchAgent.get_llm_config(config_list, timeout)\n    function_map = GoogleSearchAgent.get_function_map(api_key, cse_id)\n    self.api_key = api_key\n\n    super().__init__(\n        name=name,\n        system_message=system_message,\n        is_termination_msg=is_termination_msg,\n        max_consecutive_auto_reply=max_consecutive_auto_reply,\n        human_input_mode=human_input_mode,\n        function_map=function_map,\n        code_execution_config=code_execution_config,\n        llm_config=llm_config,\n        default_auto_reply=default_auto_reply,\n    )\n</code></pre>"},{"location":"api/autogen_agents/agents/google_search_agent/GoogleSearchAgent/#autogen_agents.agents.google_search_agent.GoogleSearchAgent.DEFAULT_SYSTEM_MESSAGE","title":"DEFAULT_SYSTEM_MESSAGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEFAULT_SYSTEM_MESSAGE = \"You are a helpful AI assistant that searches web and generates report.\\n\"\n</code></pre>"},{"location":"api/autogen_agents/agents/google_search_agent/GoogleSearchAgent/#autogen_agents.agents.google_search_agent.GoogleSearchAgent.api_key","title":"api_key  <code>instance-attribute</code>","text":"<pre><code>api_key = api_key\n</code></pre>"},{"location":"api/autogen_agents/agents/google_search_agent/GoogleSearchAgent/#autogen_agents.agents.google_search_agent.GoogleSearchAgent.get_function_map","title":"get_function_map  <code>staticmethod</code>","text":"<pre><code>get_function_map(\n    api_key: str, cse_id: str\n) -&gt; Dict[str, Any]\n</code></pre> <p>Get the function_map for the agent.</p> PARAMETER  DESCRIPTION <code>api_key</code> <p>The api_key for the agent.</p> <p> TYPE: <code>str</code> </p> <code>cse_id</code> <p>Google Custom Search Engine ID</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>The function_map for the agent.</p> Source code in <code>autogen_agents/agents/google_search_agent.py</code> <pre><code>@staticmethod\ndef get_function_map(api_key: str, cse_id: str) -&gt; Dict[str, Any]:\n    \"\"\"Get the function_map for the agent.\n\n    Args:\n        api_key: The api_key for the agent.\n        cse_id: Google Custom Search Engine ID\n\n    Returns:\n        The function_map for the agent.\n    \"\"\"\n\n    def search_web(\n        query: str, *, api_key: str = api_key, cse_id: str = cse_id\n    ) -&gt; List[Dict[str, Any]]:\n        \"\"\"Search the web for the user and provide the search report.\n\n        Args:\n            query: The query to search.\n\n        Returns:\n            The search report.\n        \"\"\"\n\n        # Build a service object for the API\n        service = build(\"customsearch\", \"v1\", developerKey=api_key)\n\n        # Perform the search\n        res = service.cse().list(q=query, cx=cse_id).execute()\n\n        # Return the results\n        items: List[Dict[str, Any]] = res.get(\"items\", [])\n        return items\n\n    function_map = {\"search_web\": search_web}\n    return function_map\n</code></pre>"},{"location":"api/autogen_agents/agents/google_search_agent/GoogleSearchAgent/#autogen_agents.agents.google_search_agent.GoogleSearchAgent.get_functions_config","title":"get_functions_config  <code>staticmethod</code>","text":"<pre><code>get_functions_config() -&gt; Dict[str, Any]\n</code></pre> <p>Get the functions part of the llm_config for the agent.</p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>The functions part of the llm_config for the agent.</p> Source code in <code>autogen_agents/agents/google_search_agent.py</code> <pre><code>@staticmethod\ndef get_functions_config() -&gt; Dict[str, Any]:\n    \"\"\"Get the functions part of the llm_config for the agent.\n\n    Returns:\n        The functions part of the llm_config for the agent.\n    \"\"\"\n\n    functions = {\n        \"search_web\": {\n            \"name\": \"search_web\",\n            \"description\": \"search the web for the user and provide the search report.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"query\": {\n                        \"type\": \"string\",\n                        \"description\": \"query to search\",\n                    }\n                },\n                \"required\": [\"query\"],\n            },\n        }\n    }\n\n    return functions\n</code></pre>"},{"location":"api/autogen_agents/agents/google_search_agent/GoogleSearchAgent/#autogen_agents.agents.google_search_agent.GoogleSearchAgent.get_llm_config","title":"get_llm_config  <code>staticmethod</code>","text":"<pre><code>get_llm_config(\n    config_list: List[Dict[str, Any]],\n    timeout: Optional[int] = None,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Get the llm_config for the agent.</p> PARAMETER  DESCRIPTION <code>config_list</code> <p>The config_list for the agent.</p> <p> TYPE: <code>List[Dict[str, Any]]</code> </p> <code>timeout</code> <p>The timeout for the agent.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>The llm_config for the agent.</p> Source code in <code>autogen_agents/agents/google_search_agent.py</code> <pre><code>@staticmethod\ndef get_llm_config(\n    config_list: List[Dict[str, Any]], timeout: Optional[int] = None\n) -&gt; Dict[str, Any]:\n    \"\"\"Get the llm_config for the agent.\n\n    Args:\n        config_list: The config_list for the agent.\n        timeout: The timeout for the agent.\n\n    Returns:\n        The llm_config for the agent.\n    \"\"\"\n\n    llm_config = {\n        \"functions\": GoogleSearchAgent.get_functions_config(),\n        \"config_list\": config_list,\n        \"timeout\": timeout,\n    }\n\n    return llm_config\n</code></pre>"}]}